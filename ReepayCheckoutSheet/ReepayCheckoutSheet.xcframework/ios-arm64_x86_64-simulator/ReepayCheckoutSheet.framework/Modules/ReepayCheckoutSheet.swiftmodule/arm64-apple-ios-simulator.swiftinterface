// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ReepayCheckoutSheet
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import DeveloperToolsSupport
import Foundation
@_exported import ReepayCheckoutSheet
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol CheckoutStyleProtocol {
  var hasDismissButton: Swift.Bool { get set }
  var dismissButtonColor: Swift.String { get set }
  var dismissButtonIcon: Swift.String? { get set }
  var bundleIdentifier: Swift.String? { get set }
}
public struct CheckoutStyle : ReepayCheckoutSheet.CheckoutStyleProtocol {
  public var hasDismissButton: Swift.Bool
  public var dismissButtonColor: Swift.String
  public var dismissButtonIcon: Swift.String?
  public var bundleIdentifier: Swift.String?
  public init(hasDismissButton: Swift.Bool, dismissButtonColor: Swift.String, dismissButtonIcon: Swift.String?, bundleIdentifier: Swift.String?)
  public init()
}
public protocol CheckoutConfigurationProtocol {
  var mode: ReepayCheckoutSheet.Mode { get set }
  var sessionID: Swift.String { get set }
  var acceptURL: Swift.String { get set }
  var cancelURL: Swift.String { get set }
  var dismissable: Swift.Bool { get set }
  var checkoutStyle: ReepayCheckoutSheet.CheckoutStyle { get set }
}
public struct CheckoutConfiguration : ReepayCheckoutSheet.CheckoutConfigurationProtocol {
  public var mode: ReepayCheckoutSheet.Mode
  public var sessionID: Swift.String
  public var acceptURL: Swift.String
  public var cancelURL: Swift.String
  public var dismissable: Swift.Bool
  public var checkoutStyle: ReepayCheckoutSheet.CheckoutStyle
  public init(mode: ReepayCheckoutSheet.Mode, sessionID: Swift.String, acceptURL: Swift.String, cancelURL: Swift.String, dismissable: Swift.Bool, checkoutStyle: ReepayCheckoutSheet.CheckoutStyle? = nil)
}
public struct CheckoutEvent {
  public var state: ReepayCheckoutSheet.CheckoutState
  public var completionUrl: Swift.String
}
public class CheckoutEventPublisher {
  final public let acceptEventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.CheckoutEvent, Swift.Never>
  final public let cancelEventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.CheckoutEvent, Swift.Never>
  public init()
  public func sendAcceptEvent(completionUrl: Swift.String)
  public func sendCancelEvent(completionUrl: Swift.String)
  @objc deinit
}
public enum CheckoutState {
  case accept
  case cancel
  public static func == (a: ReepayCheckoutSheet.CheckoutState, b: ReepayCheckoutSheet.CheckoutState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TokenValidationError : Swift.Error {
  case invalidSessionToken
  public static func == (a: ReepayCheckoutSheet.TokenValidationError, b: ReepayCheckoutSheet.TokenValidationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Mode : Swift.String {
  case mediumSheet
  case largeSheet
  case fullScreenCover
  case mediumAndLargeSheet
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 15.0, *)
public class CheckoutSheet {
  public init(configuration: ReepayCheckoutSheet.CheckoutConfiguration)
  @available(*, unavailable)
  required public init?(coder: Foundation.NSCoder)
  public func getCheckoutViewController() -> UIKit.UIViewController?
  public func getCheckoutEventPublisher() -> ReepayCheckoutSheet.CheckoutEventPublisher
  public func present()
  public func dismiss()
  public func destroy()
  @objc deinit
}
extension ReepayCheckoutSheet.CheckoutState : Swift.Equatable {}
extension ReepayCheckoutSheet.CheckoutState : Swift.Hashable {}
extension ReepayCheckoutSheet.TokenValidationError : Swift.Equatable {}
extension ReepayCheckoutSheet.TokenValidationError : Swift.Hashable {}
extension ReepayCheckoutSheet.Mode : Swift.Equatable {}
extension ReepayCheckoutSheet.Mode : Swift.Hashable {}
extension ReepayCheckoutSheet.Mode : Swift.RawRepresentable {}
