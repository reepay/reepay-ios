// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ReepayCheckoutSheet
import Combine
import DeveloperToolsSupport
import Foundation
@_exported import ReepayCheckoutSheet
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ButtonType : Swift.String {
  case icon
  case text
  case iconText
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CheckoutConfiguration {
  public var sessionId: Swift.String
  public var forceVippsDesktopFlow: Swift.Bool
  public var forceSwishDesktopFlow: Swift.Bool
  public var checkoutStyle: ReepayCheckoutSheet.CheckoutStyle
  public init?(sessionId: Swift.String, forceVippsDesktopFlow: Swift.Bool = false, forceSwishDesktopFlow: Swift.Bool = false, checkoutStyle: ReepayCheckoutSheet.CheckoutStyle? = .init())
}
public enum SheetDismissable {
  case always
  case withAlert
  case withAlertOnChanges
  public var toString: Swift.String {
    get
  }
  public static func == (a: ReepayCheckoutSheet.SheetDismissable, b: ReepayCheckoutSheet.SheetDismissable) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class CheckoutEventPublisher {
  public static let initEventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.CheckoutEvent, Swift.Never>
  public static let acceptEventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.CheckoutEvent, Swift.Never>
  public static let cancelEventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.CheckoutEvent, Swift.Never>
  public static let closeEventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.CheckoutEvent, Swift.Never>
  public static let errorEventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.CheckoutEvent, Swift.Never>
  public static let eventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.CheckoutEvent, Swift.Never>
  public init()
  @objc deinit
}
public struct IconStyle {
  public var color: Swift.String
  public var position: ReepayCheckoutSheet.HorizontalPosition
  public var padding: CoreFoundation.CGFloat
  public var size: CoreFoundation.CGSize
  public var bundleIdentifier: Swift.String?
  public var name: Swift.String?
  public init()
}
public class UserEventPublisher {
  public static let eventPublisher: Combine.PassthroughSubject<ReepayCheckoutSheet.UserEvent, Swift.Never>
  public init()
  @objc deinit
}
public struct TextStyle {
  public var color: Swift.String
  public var font: UIKit.UIFont
  public init(text: Swift.String)
  public init(text: Swift.String, size: CoreFoundation.CGFloat?, weight: UIKit.UIFont.Weight?)
  public func getText() -> Swift.String
}
public struct CheckoutStyle {
  public var mode: ReepayCheckoutSheet.Mode
  public var sheetHeightFraction: Swift.Double
  public var sheetBackgroundColor: Swift.String
  public var prefersGrabberVisible: Swift.Bool
  public var hideHeader: Swift.Bool
  public var sheetDismissable: ReepayCheckoutSheet.SheetDismissable
  public var dismissAlertStyle: ReepayCheckoutSheet.AlertStyle?
  public var dismissButtonStyle: ReepayCheckoutSheet.ButtonStyle?
  public init()
}
public struct ButtonStyle {
  public var horizontalPosition: ReepayCheckoutSheet.HorizontalPosition
  public var verticalPosition: ReepayCheckoutSheet.VerticalPosition
  public var frame: CoreFoundation.CGRect
  public var frameCornerRadius: Swift.Float
  public var bottomPadding: CoreFoundation.CGFloat
  public var backgroundColor: Swift.String?
  public var iconStyle: ReepayCheckoutSheet.IconStyle
  public var textStyle: ReepayCheckoutSheet.TextStyle
  public init(type: ReepayCheckoutSheet.ButtonType)
  public func getType() -> ReepayCheckoutSheet.ButtonType
}
public enum SessionState : Swift.String {
  case PAYMENT_METHOD_ALREADY_ADDED
  case INVOICE_ALREADY_PAID
  case INVOICE_PROCESSING
  case SUCCESS
  case SESSION_EXPIRED
  public var toString: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CheckoutState {
  case `init`
  case accept
  case cancel
  case close
  case error
  public var toString: Swift.String {
    get
  }
  public static func == (a: ReepayCheckoutSheet.CheckoutState, b: ReepayCheckoutSheet.CheckoutState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UserAction {
  case cardInputChange
  public var toString: Swift.String {
    get
  }
  public static func == (a: ReepayCheckoutSheet.UserAction, b: ReepayCheckoutSheet.UserAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EventMessageData : Swift.Codable {
  public var id: Swift.String?
  public var invoice: Swift.String?
  public var customer: Swift.String?
  public var subscription: Swift.String?
  public var payment_method: Swift.String?
  public var error: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TokenValidationError : Swift.Error {
  case invalidSessionToken
  public static func == (a: ReepayCheckoutSheet.TokenValidationError, b: ReepayCheckoutSheet.TokenValidationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UserEvent {
  public var action: ReepayCheckoutSheet.UserAction
  public var timestamp: Foundation.Date
}
public enum VerticalPosition : Swift.String {
  case above
  case overlap
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Mode : Swift.String {
  case mediumSheet
  case largeSheet
  case fullScreenCover
  case mediumAndLargeSheet
  case customSheet
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct EventMessage : Swift.Codable {
  public var event: Swift.String
  public var data: ReepayCheckoutSheet.EventMessageData?
  public var sessionState: ReepayCheckoutSheet.SessionState.RawValue?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 15.0, *)
public class CheckoutSheet {
  public init(configuration: ReepayCheckoutSheet.CheckoutConfiguration)
  @objc deinit
  @available(*, unavailable)
  required public init?(coder: Foundation.NSCoder)
  public func getCheckoutViewController() -> UIKit.UIViewController?
  public func getCheckoutEventPublisher() -> ReepayCheckoutSheet.CheckoutEventPublisher.Type
  public func getUserEventPublisher() -> ReepayCheckoutSheet.UserEventPublisher.Type
  public func present()
  public func dismiss()
  public func destroy()
}
public struct AlertStyle {
  public var title: Swift.String
  public var message: Swift.String
  public var preferredStyle: UIKit.UIAlertController.Style
  public var dismissConfirmText: Swift.String
  public var dismissConfirmStyle: UIKit.UIAlertAction.Style
  public var dismissCancelText: Swift.String
  public var dismissCancelStyle: UIKit.UIAlertAction.Style
  public init()
}
public struct CheckoutEvent {
  public var state: ReepayCheckoutSheet.CheckoutState
  public var message: ReepayCheckoutSheet.EventMessage
  public var timestamp: Foundation.Date
}
public enum HorizontalPosition : Swift.String {
  case left
  case center
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ReepayCheckoutSheet.ButtonType : Swift.Equatable {}
extension ReepayCheckoutSheet.ButtonType : Swift.Hashable {}
extension ReepayCheckoutSheet.ButtonType : Swift.RawRepresentable {}
extension ReepayCheckoutSheet.SheetDismissable : Swift.Equatable {}
extension ReepayCheckoutSheet.SheetDismissable : Swift.Hashable {}
extension ReepayCheckoutSheet.SessionState : Swift.Equatable {}
extension ReepayCheckoutSheet.SessionState : Swift.Hashable {}
extension ReepayCheckoutSheet.SessionState : Swift.RawRepresentable {}
extension ReepayCheckoutSheet.CheckoutState : Swift.Equatable {}
extension ReepayCheckoutSheet.CheckoutState : Swift.Hashable {}
extension ReepayCheckoutSheet.UserAction : Swift.Equatable {}
extension ReepayCheckoutSheet.UserAction : Swift.Hashable {}
extension ReepayCheckoutSheet.TokenValidationError : Swift.Equatable {}
extension ReepayCheckoutSheet.TokenValidationError : Swift.Hashable {}
extension ReepayCheckoutSheet.VerticalPosition : Swift.Equatable {}
extension ReepayCheckoutSheet.VerticalPosition : Swift.Hashable {}
extension ReepayCheckoutSheet.VerticalPosition : Swift.RawRepresentable {}
extension ReepayCheckoutSheet.Mode : Swift.Equatable {}
extension ReepayCheckoutSheet.Mode : Swift.Hashable {}
extension ReepayCheckoutSheet.Mode : Swift.RawRepresentable {}
extension ReepayCheckoutSheet.HorizontalPosition : Swift.Equatable {}
extension ReepayCheckoutSheet.HorizontalPosition : Swift.Hashable {}
extension ReepayCheckoutSheet.HorizontalPosition : Swift.RawRepresentable {}
